# -*- coding: utf-8 -*-
"""
获取沪深300成分（CSI300）优先；若被网络/证书拦截，则回退到离线替代清单（~120只、覆盖主要行业）。
输出: data/universe.csv （列: ticker,name）
A股代码规范：上证 .SS，深证 .SZ
"""
import csv, json
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
DATA = ROOT / "data"
DATA.mkdir(parents=True, exist_ok=True)

# —— 离线替代清单（约120只，行业覆盖广，足够做横截面检验；网络恢复后会自动被真·CSI300覆盖）——
OFFLINE_FALLBACK = [
    # 银行/保险/券商
    ("000001.SZ","平安银行"), ("600036.SS","招商银行"), ("601398.SS","工商银行"), ("601939.SS","建设银行"),
    ("601288.SS","农业银行"), ("601988.SS","中国银行"), ("601328.SS","交通银行"),
    ("601318.SS","中国平安"), ("601628.SS","中国人寿"), ("601601.SS","中国太保"),
    ("600030.SS","中信证券"), ("601211.SS","国泰君安"), ("600837.SS","海通证券"),

    # 电子/计算机/通信
    ("300750.SZ","宁德时代"), ("002475.SZ","立讯精密"), ("002415.SZ","海康威视"), ("000100.SZ","TCL科技"),
    ("600703.SS","三安光电"), ("300014.SZ","亿纬锂能"), ("300015.SZ","爱尔眼科"), ("600460.SS","士兰微"),
    ("600584.SS","长电科技"), ("603986.SS","兆易创新"), ("688981.SS","中芯国际"),
    ("600941.SS","中国移动"), ("600050.SS","中国联通"), ("601728.SS","中国电信"),

    # 医药生物
    ("600276.SS","恒瑞医药"), ("603259.SS","药明康德"), ("300760.SZ","迈瑞医疗"),
    ("688235.SS","百济神州"), ("600196.SS","复星医药"), ("600309.SS","万华化学"),

    # 消费（可选/必选）
    ("600519.SS","贵州茅台"), ("000858.SZ","五粮液"), ("002304.SZ","洋河股份"),
    ("000333.SZ","美的集团"), ("000651.SZ","格力电器"), ("603288.SS","海天味业"),
    ("603369.SS","今世缘"), ("600887.SS","伊利股份"), ("600809.SS","山西汾酒"),

    # 新能源/汽车链
    ("002594.SZ","比亚迪"), ("601012.SS","隆基绿能"), ("688599.SS","天合光能"),
    ("601888.SS","中国中免"), ("601238.SS","广汽集团"), ("600104.SS","上汽集团"),

    # 能源/资源/化工
    ("601857.SS","中国石油"), ("600028.SS","中国石化"), ("600938.SS","中国海油"),
    ("601088.SS","中国神华"), ("601225.SS","陕西煤业"), ("600111.SS","北方稀土"),
    ("600438.SS","通威股份"), ("600489.SS","中金黄金"), ("600362.SS","江西铜业"),

    # 工业/建筑/机械
    ("601766.SS","中国中车"), ("601618.SS","中国中冶"), ("601186.SS","中国铁建"), ("601390.SS","中国中铁"),
    ("601985.SS","中国核电"), ("601100.SS","恒立液压"), ("603260.SS","合盛硅业"),
    ("601600.SS","中国铝业"), ("601727.SS","上海电气"), ("601607.SS","上海医药"),

    # 公用事业/电力
    ("600900.SS","长江电力"), ("600886.SS","国投电力"), ("600023.SS","浙能电力"),
    ("600995.SS","文山电力"), ("600157.SS","永泰能源"), ("600021.SS","上海电力"),

    # 互联网/平台/媒体
    ("600519.SS","贵州茅台"), ("600887.SS","伊利股份"), ("601633.SS","长城汽车"),
    ("600030.SS","中信证券"), ("601888.SS","中国中免"), ("601138.SS","工业富联"),

    # 房地产/建筑装饰（给少量以示覆盖）
    ("600048.SS","保利发展"), ("600383.SS","金地集团"), ("600606.SS","绿地控股"),

    # 军工/航天
    ("600760.SS","中航沈飞"), ("600893.SS","航发动力"), ("601989.SS","中国重工"),

    # 交运/物流
    ("601919.SS","中远海控"), ("601111.SS","中国国航"), ("600029.SS","南方航空"), ("600115.SS","中国东航"),

    # 其他补充（凑够~120只）
    ("600109.SS","国金证券"), ("600061.SS","国投资本"), ("600999.SS","招商证券"),
    ("600741.SS","华域汽车"), ("600547.SS","山东黄金"), ("601628.SS","中国人寿"),
    ("600276.SS","恒瑞医药"), ("600031.SS","三一重工"), ("600406.SS","国电南瑞"),
    ("601877.SS","正泰电器"), ("601006.SS","大秦铁路"), ("600104.SS","上汽集团"),
    ("600585.SS","海螺水泥"), ("600566.SS","济川药业"), ("603259.SS","药明康德"),
    ("600867.SS","通化东宝"), ("600573.SS","惠泉啤酒"), ("600535.SS","天士力"),
    ("600436.SS","片仔癀"), ("600061.SS","国投资本"), ("600036.SS","招商银行"),
    ("000002.SZ","万科A"), ("000538.SZ","云南白药"), ("000725.SZ","京东方A"),
    ("000768.SZ","中航西飞"), ("000876.SZ","新希望"), ("000977.SZ","浪潮信息"),
    ("002142.SZ","宁波银行"), ("002304.SZ","洋河股份"), ("002371.SZ","北方华创"),
    ("002415.SZ","海康威视"), ("002475.SZ","立讯精密"), ("002714.SZ","牧原股份"),
    ("300015.SZ","爱尔眼科"), ("300033.SZ","同花顺"), ("300122.SZ","智飞生物"),
    ("300274.SZ","阳光电源"), ("300413.SZ","芒果超媒"), ("300450.SZ","先导智能"),
    ("300498.SZ","温氏股份"), ("300628.SZ","亿联网络"), ("300676.SZ","华大基因"),
    ("300682.SZ","朗新科技"), ("300760.SZ","迈瑞医疗"), ("300782.SZ","卓胜微"),
    ("300896.SZ","爱美客"), ("300999.SZ","金龙鱼"),
]

def eastmoney_csi300():
    """
    东方财富指数成分接口：
    secids=1.000300 -> 沪深300
    fields: f12(代码), f14(名称)
    """
    url = ("https://push2.eastmoney.com/api/qt/ulist.np/get?"
           "secids=1.000300&pn=1&pz=5000&po=1&fid=f3&invt=2&fields=f12,f14")
    req = Request(url, headers={"User-Agent":"Mozilla/5.0"})
    with urlopen(req, timeout=20) as resp:
        data = json.loads(resp.read().decode("utf-8"))
        diff = ((data or {}).get("data") or {}).get("diff") or []
        out = []
        for it in diff:
            code = str(it.get("f12") or "").strip()
            name = str(it.get("f14") or "").strip()
            if not code:
                continue
            suffix = ".SS" if code.startswith(("60","68")) else ".SZ"
            out.append((code + suffix, name))
        return out

def save_universe(rows, path):
    with open(path, "w", newline="", encoding="utf-8-sig") as f:
        w = csv.writer(f)
        w.writerow(["ticker","name"])
        for r in rows:
            w.writerow(list(r))

def main():
    rows = []
    try:
        rows = eastmoney_csi300()
    except (URLError, HTTPError, OSError) as e:
        print("[ERR] 东财CSI300接口失败：", e)
    if not rows:
        print("[WARN] 使用离线替代清单（~120只），可立即用于横截面实验；网络恢复后重跑本脚本会自动覆盖为真·CSI300。")
        rows = OFFLINE_FALLBACK
    save_universe(rows, DATA/"universe.csv")
    print(f"[OK] universe.csv 写入 {len(rows)} 只股票")

if __name__ == "__main__":
    main()
